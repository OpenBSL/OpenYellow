// настраиваемые константы
//* ВыводитьФоновыеЗаПоследниеСек - период отбора по времени запуска фоновых (по-умолчанию час)
//

//@skip-warning-all
Перем ФлагПолучатьПоследниеФоновые;
//@skip-check form-module-missing-pragma
//@skip-check module-structure-var-in-region
Перем ПолучитьИменаРегламентыхИзФоновых;
//@skip-check form-module-missing-pragma
//@skip-check module-structure-var-in-region
Перем ВыводитьФоновыеЗаПоследниеСек;

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		ОтборПриОткрытии();
		Если АвтообновлениеСпискаФоновыхЗаданий = Истина Тогда
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияФоновыхЗаданий", ПериодАвтообновленияСпискаФоновыхЗаданий);	
		КонецЕсли;
		
		Если АвтообновлениеСпискаРегламентныхЗаданий = Истина Тогда
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияРегламентныхЗаданий", ПериодАвтообновленияСпискаРегламентныхЗаданий);	
		КонецЕсли;
		
		ОбновитьСписокФоновыхЗаданий();
		ОбновитьСписокРегламентныхЗаданий();
	Исключение	
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.СписокРегламентныхЗаданийЖурналРегистрации1.Видимость = Ложь;
	#КонецЕсли

КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ОтборПриОткрытии()
	
	КоличествоЧасов = 2;
	ВыводитьФоновыеЗаПоследниеСек = КоличествоЧасов*3600;
	//@skip-check form-self-reference
	ЭтаФорма.ОтборФоновыхЗаданийВключен = Истина;
	// защитный фильтр при интенсивном запуске фоновых
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	ЭтаФорма.ОтборФоновыхЗаданий = Новый ХранилищеЗначения(Новый Структура("Начало", ТекущаяДатаСеанса() - ВыводитьФоновыеЗаПоследниеСек));
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ОбновитьСписокРегламентныхЗаданий()
	Перем ТекущийИдентификатор;

	ТекущаяСтрока = Элементы.СписокРегламентныхЗаданий.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекСтрока = СписокРегламентныхЗаданий.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущийИдентификатор = ТекСтрока.Идентификатор;
	КонецЕсли;

	Идентификаторы = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокРегламентныхЗаданий.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		ТекСтрока = СписокРегламентныхЗаданий.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Идентификаторы.Добавить(ТекСтрока.Идентификатор);
	КонецЦикла;
	
	СписокРегламентныхЗаданий.Очистить();
	
	Отбор = Неопределено;
	СтрокаОтбора = "";
	Если ОтборРегламентныхЗаданийВключен = Истина Тогда
		Отбор = ОтборРегламентныхЗаданий;
		Для Каждого Элемент Из Отбор Цикл
			Если СтрокаОтбора <> "" Тогда
				 СтрокаОтбора = СтрокаОтбора + ";"
			КонецЕсли;
			СтрокаОтбора = СтрокаОтбора + Элемент.Ключ + ": " + Элемент.Значение;
		КонецЦикла;
		Если СтрокаОтбора <> "" Тогда
			СтрокаОтбора = " ("+СтрокаОтбора+")";
		КонецЕсли;
	КонецЕсли;
	Элементы.РегламентныеЗадания.Заголовок = "Регламентные задания" + СтрокаОтбора;
	
	Попытка
		Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Исключение
		//Элементы.СписокРегламентныхЗаданий.Доступность = Ложь;
		Инфо = ИнформацияОбОшибке();
		//@skip-check use-non-recommended-method
		Сообщить(ПодробноеПредставлениеОшибки(Инфо));
		Возврат;
	КонецПопытки;
	
	//Элементы.СписокРегламентныхЗаданий.Доступность = Истина;
	
	Для Каждого Регламентное из Регламентные Цикл
		НоваяСтрока = СписокРегламентныхЗаданий.Добавить();
		НоваяСтрока.Метаданные = Регламентное.Метаданные.Представление();
		НоваяСтрока.Наименование = Регламентное.Наименование;
		//[+] SellwinSystem Титовец Р.В. 10.11.2022 
		Если не ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
			НоваяСтрока.Наименование = НоваяСтрока.Метаданные;
		КонецЕсли; 
		//[-] SellwinSystem Титовец Р.В. 10.11.2022 
		
		НоваяСтрока.Ключ = Регламентное.Ключ;
		НоваяСтрока.Расписание = Регламентное.Расписание;
		НоваяСтрока.Пользователь = Регламентное.ИмяПользователя;
		НоваяСтрока.Предопределенное = Регламентное.Предопределенное;
		НоваяСтрока.Использование = Регламентное.Использование;
		НоваяСтрока.Идентификатор = Регламентное.УникальныйИдентификатор;
		НоваяСтрока.Метод = Регламентное.Метаданные.ИмяМетода;
		
		СвойстваПоследнегоВыполненого = ПолучитьСвойстваПоследнегоВыполненого(НоваяСтрока.Идентификатор, Регламентное);
		НоваяСтрока.Состояние = СвойстваПоследнегоВыполненого.Состояние;
		НоваяСтрока.Выполнялось = СвойстваПоследнегоВыполненого.Выполнялось;
		
		ИмяРегламентногоЗадания = НоваяСтрока.Метаданные + ?(ЗначениеЗаполнено(НоваяСтрока.Наименование), ":" + НоваяСтрока.Наименование, "");
		Строки = СписокФоновыхЗаданий.НайтиСтроки(Новый Структура("Метод, Наименование", НоваяСтрока.Метод, НоваяСтрока.Наименование));
		Для Каждого Фоновое Из Строки Цикл
			Фоновое.Регламентное = ИмяРегламентногоЗадания;
		КонецЦикла;
	КонецЦикла;
	
	СписокРегламентныхЗаданий.Сортировать("Наименование");
	
	Если ТекущийИдентификатор <> Неопределено Тогда
		Строки = СписокРегламентныхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", ТекущийИдентификатор));
		Если Строки.Количество() > 0 Тогда
			Элементы.СписокРегламентныхЗаданий.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

	Если Идентификаторы.Количество() > 0 Тогда
		ВыделенныеСтроки.Очистить();
	КонецЕсли;
	
	Для Каждого Идентификатор из Идентификаторы Цикл
		Строки = СписокРегламентныхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Если Строки.Количество() > 0 Тогда
			ВыделенныеСтроки.Добавить(Строки[0].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ОбновитьСписокФоновыхЗаданий(ИдентификаторНовогоЗадания = Неопределено)
	Перем ТекущийИдентификатор;

	ТекущаяСтрока = Элементы.СписокФоновыхЗаданий.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекСтрока = СписокФоновыхЗаданий.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущийИдентификатор = ТекСтрока.Идентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторНовогоЗадания) Тогда
		ТекущийИдентификатор = ИдентификаторНовогоЗадания;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокФоновыхЗаданий.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		ТекСтрока = СписокФоновыхЗаданий.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Идентификаторы.Добавить(ТекСтрока.Идентификатор);
	КонецЦикла;

	СписокФоновыхЗаданий.Очистить();
	
	Отбор = Неопределено;
	СтрокаОтбора = "";
	Если ОтборФоновыхЗаданийВключен = Истина Тогда
		Отбор = ОтборФоновыхЗаданий.Получить();
		Для Каждого Элемент Из Отбор Цикл
			Если СтрокаОтбора <> "" Тогда
				 СтрокаОтбора = СтрокаОтбора + ";"
			КонецЕсли;
			СтрокаОтбора = СтрокаОтбора + Элемент.Ключ + ": " + Элемент.Значение;
		КонецЦикла;
		Если СтрокаОтбора <> "" Тогда
			СтрокаОтбора = " ("+СтрокаОтбора+")";
		КонецЕсли;
	КонецЕсли;
	Элементы.ФоновыеЗадания.Заголовок = "Фоновые задания" + СтрокаОтбора;
	
	Попытка
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Исключение
		Инфо = ИнформацияОбОшибке();
		//@skip-check use-non-recommended-method
		Сообщить(ПодробноеПредставлениеОшибки(Инфо));
		//Элементы.СписокФоновыхЗаданий.Доступность = Ложь;
		Возврат;
	КонецПопытки;
	
	//Элементы.СписокФоновыхЗаданий.Доступность = Истина;
	Для Каждого Фоновое из Фоновые Цикл
		НоваяСтрока = СписокФоновыхЗаданий.Добавить();
		
		НоваяСтрока.Сообщения = Фоновое.ПолучитьСообщенияПользователю().Количество();
		Строки = СписокРегламентныхЗаданий.НайтиСтроки(Новый Структура("Метод, Наименование", Фоновое.ИмяМетода, Фоновое.Наименование));
		Если Строки.Количество() > 0 Тогда
			Если СписокФоновыхЗаданий.Индекс(НоваяСтрока) = 0 Тогда
				Строки[0].Выполнялось = Фоновое.Начало;
				Строки[0].Состояние = Фоновое.Состояние;
			КонецЕсли;
			ИмяРегламентногоЗадания = Строки[0].Метаданные + ":" + Строки[0].Наименование;
			НоваяСтрока.Регламентное = ИмяРегламентногоЗадания;
		Иначе
			НоваяСтрока.Регламентное = Фоновое.УникальныйИдентификатор;
		КонецЕсли;
			
		НоваяСтрока.Наименование = Фоновое.Наименование;
		НоваяСтрока.Ключ = Фоновое.Ключ;
		НоваяСтрока.Метод = Фоновое.ИмяМетода;
		НоваяСтрока.Состояние = Фоновое.Состояние;
		НоваяСтрока.Начало = Фоновое.Начало;
		НоваяСтрока.Конец = Фоновое.Конец;
		НоваяСтрока.Сервер = Фоновое.Расположение;
		
		Если Фоновое.ИнформацияОбОшибке <> Неопределено Тогда
			НоваяСтрока.Ошибки = Фоновое.ИнформацияОбОшибке.Описание;
		КонецЕсли;
		
		НоваяСтрока.Идентификатор = Фоновое.УникальныйИдентификатор;
		НоваяСтрока.СостояниеЗадания = Фоновое.Состояние;
	КонецЦикла;
	
	Если ТекущийИдентификатор <> Неопределено Тогда
		Строки = СписокФоновыхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", ТекущийИдентификатор));
		Если Строки.Количество() > 0 Тогда
			Элементы.СписокФоновыхЗаданий.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

	Если Идентификаторы.Количество() > 0 Тогда
		ВыделенныеСтроки.Очистить();
	КонецЕсли;
	
	Для Каждого Идентификатор из Идентификаторы Цикл
		Строки = СписокФоновыхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Если Строки.Количество() > 0 Тогда
			ВыделенныеСтроки.Добавить(Строки[0].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОбновитьРегламентныеЗадания(Команда)
	ОбновитьСписокРегламентныхЗаданий();
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура Расписание(Команда)
	ВыделенныеСтроки = Элементы.СписокРегламентныхЗаданий.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Строка = СписокРегламентныхЗаданий.НайтиПоИдентификатору(ВыделенныеСтроки.Получить(0));
		Расписание = ПолучитьРасписаниеРегламентногоЗадания(Строка.Идентификатор);
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		//@skip-check form-self-reference
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДиалогРасписанияРегламентногоЗаданияОткрытьЗавершение", ЭтаФорма);
		
		Диалог.Показать(ОписаниеОповещенияОЗакрытии);

	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура ДиалогРасписанияРегламентногоЗаданияОткрытьЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	Если Расписание <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.СписокРегламентныхЗаданий.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() > 0 Тогда
			Строка = СписокРегламентныхЗаданий.НайтиПоИдентификатору(ВыделенныеСтроки.Получить(0));
			УстановитьРасписаниеРегламентногоЗадания(Строка.Идентификатор, Строка.Наименование, Расписание, Строка.Метаданные);
			Строка.Расписание = Расписание;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокРегламентныхЗаданийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторЗадания", "");
	
	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокРегламентныхЗаданийПередНачаломДобавленияЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогРегламентногоЗадания"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура СписокРегламентныхЗаданийПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		ОбновитьСписокРегламентныхЗаданий();
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокРегламентныхЗаданийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ВыделенныеСтроки = Элементы.СписокРегламентныхЗаданий.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Строка = СписокРегламентныхЗаданий.НайтиПоИдентификатору(ВыделенныеСтроки.Получить(0));
		
		СтруктураПараметров = Новый Структура;
		Ид = Строка.Идентификатор;
		СтруктураПараметров.Вставить("ИдентификаторЗадания", Ид);
	
		//@skip-check form-self-reference
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокРегламентныхЗаданийПередНачаломИзмененияЗавершение", ЭтаФорма);
		
		//@skip-check form-self-reference
		ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогРегламентногоЗадания"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура СписокРегламентныхЗаданийПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		ОбновитьСписокРегламентныхЗаданий();
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы) 
	//@skip-check form-self-reference
	//@skip-check form-self-reference
	//@skip-check use-non-recommended-method
	Возврат Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы,".Форма.")+6) + ИмяФормы; 
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокРегламентныхЗаданийПередУдалением(Элемент, Отказ)
	Попытка
		Отказ = Истина;
		УдалитьРегламентноеЗадание();
		
		ОбновитьСписокРегламентныхЗаданий();
	Исключение
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура УдалитьРегламентноеЗадание()
	ВыделенныеСтроки = Элементы.СписокРегламентныхЗаданий.ВыделенныеСтроки;
	Для Каждого Стр из ВыделенныеСтроки Цикл
		Строка = СписокРегламентныхЗаданий.НайтиПоИдентификатору(Стр);
		
		РегламентноеЗадание = РеквизитФормыВЗначение("Объект").ПолучитьОбъектРегламентногоЗадания(Строка.Идентификатор);
		Если РегламентноеЗадание.Предопределенное Тогда
			ВызватьИсключение("Нельзя удалить предопределенное задание: " + РегламентноеЗадание.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр из ВыделенныеСтроки Цикл
		Строка = СписокРегламентныхЗаданий.НайтиПоИдентификатору(Стр);
		РегламентноеЗадание = РеквизитФормыВЗначение("Объект").ПолучитьОбъектРегламентногоЗадания(Строка.Идентификатор);
		РегламентноеЗадание.Удалить();
	КонецЦикла
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОбновитьФоновыеЗадания(Команда)
	ОбновитьСписокФоновыхЗаданий();
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокФоновыхЗаданийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторЗадания", "");

	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокФоновыхЗаданийПередНачаломДобавленияЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогФоновогоЗадания"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура СписокФоновыхЗаданийПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
	    ОбновитьСписокФоновыхЗаданий();			
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Функция ПолучитьРасписаниеРегламентногоЗадания(УникальныйНомерЗадания)
	ОбъектЗадания = РеквизитФормыВЗначение("Объект").ПолучитьОбъектРегламентногоЗадания(УникальныйНомерЗадания);
	Если ОбъектЗадания = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Возврат ОбъектЗадания.Расписание;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаСервере
Функция УстановитьРасписаниеРегламентногоЗадания(Идентификатор, Наименование, Расписание, ИмяЗадания)
	ОбъектЗадания = РеквизитФормыВЗначение("Объект").ПолучитьОбъектРегламентногоЗадания(Идентификатор);		
	Если ОбъектЗадания = Неопределено Тогда
		РедОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяЗадания);
		РедОбъектЗадания.Наименование = Наименование;
		РедОбъектЗадания.Использование = Истина;
	Иначе
		РедОбъектЗадания = ОбъектЗадания;
	КонецЕсли;
	
	РедОбъектЗадания.Расписание = Расписание;
	Попытка
		РедОбъектЗадания.Записать();
	Исключение
		ВызватьИсключение "Произошла ошибка при сохранении расписания выполнения обменов. Возможно данные расписания были изменены. Закройте форму настройки и повторите попытку изменения расписания еще раз.
		|Подробное описание ошибки: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокФоновыхЗаданийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокФоновыхЗаданийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОтменитьФоновоеЗадание(Команда)
	Попытка
		ОтменитьФоновыеЗадания();
		ОбновитьСписокФоновыхЗаданий();
	Исключение	
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ОтменитьФоновыеЗадания()
	ВыделенныеСтроки = Элементы.СписокФоновыхЗаданий.ВыделенныеСтроки;
	Для Каждого Стр из ВыделенныеСтроки Цикл
		Строка = СписокФоновыхЗаданий.НайтиПоИдентификатору(Стр);
		ТекИдентификатор = Новый УникальныйИдентификатор(Строка.Идентификатор);
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекИдентификатор);
		ФоновоеЗадание.Отменить();
	КонецЦикла;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура НастройкаСпискаРегламентныхЗаданий(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автообновление", АвтообновлениеСпискаРегламентныхЗаданий);
	СтруктураПараметров.Вставить("ПериодАвтообновления", ПериодАвтообновленияСпискаРегламентныхЗаданий);
	
	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаСпискаРегламентныхЗаданийЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогНастроекСписка"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура НастройкаСпискаРегламентныхЗаданийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		АвтообновлениеСпискаРегламентныхЗаданий = РезультатЗакрытия.Автообновление;
		ПериодАвтообновленияСпискаРегламентныхЗаданий = РезультатЗакрытия.ПериодАвтообновления;
		
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияРегламентныхЗаданий");
		Если АвтообновлениеСпискаРегламентныхЗаданий = Истина Тогда
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияРегламентныхЗаданий", ПериодАвтообновленияСпискаРегламентныхЗаданий);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура НастройкаСпискаФоновыхЗаданий(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автообновление", АвтообновлениеСпискаФоновыхЗаданий);
	СтруктураПараметров.Вставить("ПериодАвтообновления", ПериодАвтообновленияСпискаФоновыхЗаданий);
	
	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаСпискаФоновыхЗаданийЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогНастроекСписка"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура НастройкаСпискаФоновыхЗаданийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		АвтообновлениеСпискаФоновыхЗаданий = РезультатЗакрытия.Автообновление;
		ПериодАвтообновленияСпискаФоновыхЗаданий = РезультатЗакрытия.ПериодАвтообновления;
		
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияФоновыхЗаданий");
		Если АвтообновлениеСпискаФоновыхЗаданий = Истина Тогда
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияФоновыхЗаданий", ПериодАвтообновленияСпискаФоновыхЗаданий);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОбработчикАвтообновленияФоновыхЗаданий()
	//Попытка
		ОбновитьСписокФоновыхЗаданий();
	//Исключение
	//	// Может возикать ошибка "Неизвестный идентификатор формы"
	//КонецПопытки;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОбработчикАвтообновленияРегламентныхЗаданий()
	//Попытка
		ОбновитьСписокРегламентныхЗаданий();
	//Исключение
	//	// Может возикать ошибка "Неизвестный идентификатор формы"
	//КонецПопытки;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УстановитьОтборРегламентныхЗаданий(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", ОтборРегламентныхЗаданий);
	
	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьОтборРегламентныхЗаданийЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогОтбораРегламентногоЗадания"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура УстановитьОтборРегламентныхЗаданийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ОтборРегламентныхЗаданий = РезультатЗакрытия;
		ОтборРегламентныхЗаданийВключен = Истина;
		ОбновитьСписокРегламентныхЗаданий();
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОтключитьОтборРегламентныхЗаданий(Команда)
	ОтборРегламентныхЗаданийВключен = Ложь;
	ОбновитьСписокРегламентныхЗаданий();
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ОтключитьОтборФоновыхЗаданий(Команда)
	ОтборФоновыхЗаданийВключен = Ложь;
	ОбновитьСписокФоновыхЗаданий();
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УстановитьОтборФоновыхЗаданий(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", ОтборФоновыхЗаданий);
	
	//@skip-check form-self-reference
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьОтборФоновыхЗаданийЗавершение", ЭтаФорма);
	
	//@skip-check form-self-reference
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ДиалогОтбораФоновогоЗадания"), СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

//@skip-check module-structure-method-in-regions
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-parameter-section
&НаКлиенте
Процедура УстановитьОтборФоновыхЗаданийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("ХранилищеЗначения") Тогда
		ОтборФоновыхЗаданий = РезультатЗакрытия;
		ОтборФоновыхЗаданийВключен = Истина;
		ОбновитьСписокФоновыхЗаданий();
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура СписокФоновыхЗаданийПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = СписокФоновыхЗаданий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Фоновое = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущаяСтрока.Идентификатор);
	Если Фоновое <> Неопределено Тогда
		РегламентноеЗадание = Фоновое.РегламентноеЗадание;
		Если Фоновое.РегламентноеЗадание <> Неопределено Тогда
			Строка = РегламентноеЗадание.Метаданные.Представление();
			Если РегламентноеЗадание.Наименование <> "" Тогда
				Строка = Строка + ":" +	РегламентноеЗадание.Наименование;
			КонецЕсли;
			
			ТекущаяСтрока.Регламентное = Строка;
		Иначе
			ТекущаяСтрока.Регламентное = "";
		КонецЕсли;
		ТекущаяСтрока.Сообщения = Фоновое.ПолучитьСообщенияПользователю().Количество();
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокФоновыхЗаданийПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокФоновыхЗаданий.ТекущаяСтрока;//первые 7
	Если ТекущаяСтрока <> Неопределено Тогда
		Для ИденификаторТекСтроки = ТекущаяСтрока По ТекущаяСтрока Цикл
			//@skip-check form-self-reference
			ТекСтрока = ЭтаФорма.СписокФоновыхЗаданий.НайтиПоИдентификатору(ИденификаторТекСтроки);
			Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.Регламентное) = Тип("УникальныйИдентификатор") Тогда
				СписокФоновыхЗаданийПриАктивизацииСтрокиНаСервере(ТекСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("ОбработчикАвтообновленияФоновыхЗаданий");
	ОтключитьОбработчикОжидания("ОбработчикАвтообновленияРегламентныхЗаданий");
КонецПроцедуры


//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ЗапуститьЗадание(Команда)
	ТекущаяСтрока = Элементы.СписокРегламентныхЗаданий.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ЗапуститьЗаданиеНаСервере(ТекущаяСтрока.Идентификатор);
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервере
Процедура ЗапуститьЗаданиеНаСервере(УникальныйИдентификатор)
	
	Идентификатор = Новый УникальныйИдентификатор(УникальныйИдентификатор);
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	//Если Задание.Использование Тогда
		
		//проверка на выполнение в текущий момент
		Отбор=Новый Структура;
		Отбор.Вставить("Ключ",Строка(Задание.УникальныйИдентификатор));
		Отбор.Вставить("Состояние ",СостояниеФоновогоЗадания.Активно);		
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ИдентификаторНовогоЗадания = Неопределено;
		
		Если МассивЗаданий.Количество()=0 Тогда 
			НаименованиеФоновогоЗадания = "Запуск вручную: "+ Задание.Метаданные.Синоним;
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода, Задание.Параметры, Строка(Задание.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
			ИдентификаторНовогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
		Иначе
			//@skip-check use-non-recommended-method
			Сообщить("Задание уже запущено");
		КонецЕсли;
		
	//КонецЕсли;
	ОбновитьСписокРегламентныхЗаданий();
	ОбновитьСписокФоновыхЗаданий(ИдентификаторНовогоЗадания);
КонецПроцедуры


//@skip-check module-structure-method-in-regions
&НаСервере
Процедура СписокФоновыхЗаданийСообщенияВыборНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = СписокФоновыхЗаданий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Фоновое = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущаяСтрока.Идентификатор);
	Если Фоновое <> Неопределено Тогда
		СообщенияПользователю = Фоновое.ПолучитьСообщенияПользователю();
		Для Каждого Сообщение Из СообщенияПользователю Цикл;
			//@skip-check use-non-recommended-method
			Сообщить(Сообщение.Текст);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокФоновыхЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокФоновыхЗаданийСообщения" Тогда
		СписокФоновыхЗаданийСообщенияВыборНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаСервереБезКонтекста
Функция ПолучитьСвойстваПоследнегоВыполненого(ИдентификаторРегламентногоЗадания, Регламентное_ = Неопределено)
	Результат = Новый Структура("Выполнялось, Состояние");
	Если Регламентное_ = Неопределено Тогда
		Регламентное = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
	Иначе
		Регламентное = Регламентное_;
	КонецЕсли;
	Если Регламентное <> Неопределено Тогда
		Попытка
			// вызывает тормоза, если регламентное выполнялось давно и фоновых было много
			ПоследнееЗадание = Регламентное.ПоследнееЗадание;
		Исключение
			ПоследнееЗадание = Неопределено;
			Инфо = ИнформацияОбОшибке();
			//@skip-check use-non-recommended-method
			Сообщить(ПодробноеПредставлениеОшибки(Инфо));
			Возврат Результат;
		КонецПопытки;
		
		Если ПоследнееЗадание <> Неопределено Тогда
			Результат.Выполнялось = Строка(ПоследнееЗадание.Начало);
			Результат.Состояние = Строка(ПоследнееЗадание.Состояние);
		КонецЕсли;

	КонецЕсли;
	Возврат Результат;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СписокРегламентныхЗаданийПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокРегламентныхЗаданий.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	//@skip-check form-self-reference
	ТекущиеДанные = ЭтаФорма.СписокРегламентныхЗаданий.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		СвойстваПоследнегоВыполненого = ПолучитьСвойстваПоследнегоВыполненого(ТекущиеДанные.Идентификатор);
		ТекущиеДанные.Состояние = СвойстваПоследнегоВыполненого.Состояние;
		ТекущиеДанные.Выполнялось = СвойстваПоследнегоВыполненого.Выполнялось;
	КонецЕсли;
КонецПроцедуры


