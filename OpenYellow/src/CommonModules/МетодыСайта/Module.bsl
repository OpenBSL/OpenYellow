// @skip-check Undefined variable

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыгрузитьИндексы() Экспорт
    
    ИмяКаталога     = "ypm_index/";
    КаталогИндексов = Инструментарий.ПолучитьНастройку("ПапкаДанных") + ИмяКаталога;
    ПоследняяГруппа = МетодыGitHub.ПолучитьНомерГруппы();
    МассивИндексов  = Новый Массив;
    АдресСайта      = Инструментарий.ПолучитьНастройку("АдресСайта");
    ТекущаяДата     = XMLСтрока(НачалоЧаса(ТекущаяДатаСеанса()));
    ВерсияYPM       = Константы.ВерсияYPM.Получить();
    
    Для Н = 1 По ПоследняяГруппа Цикл
        
        ИмяФайла        = Строка(Н);
        ИмяСРасширением = ИмяФайла + ".json";
        
        Путь          = КаталогИндексов + ИмяСРасширением;
        //@skip-check query-in-loop
        ДанныеИндекса = ПолучитьИндексМенеджера(Н);
        Инструментарий.ЗаписатьJSONВФайл(ДанныеИндекса, Путь);
        МассивИндексов.Добавить(АдресСайта + "data/" + ИмяКаталога + ИмяСРасширением);
        
    КонецЦикла;
    
    СтруктураИндекса = Новый Структура;
    СтруктураИндекса.Вставить("updatedAt"        , ТекущаяДата);
    СтруктураИндекса.Вставить("ypmVersion"       , ВерсияYPM.Наименование); 
    СтруктураИндекса.Вставить("updateDescription", ВерсияYPM.Описание);
    СтруктураИндекса.Вставить("fileUrl"          , ВерсияYPM.URLФайла);
    СтруктураИндекса.Вставить("chunks"           , МассивИндексов);
    
    Инструментарий.ЗаписатьJSONВФайл(СтруктураИндекса, КаталогИндексов + "index.json");
       
КонецПроцедуры

Процедура ОбновитьДанныеСайта() Экспорт
    
    //ПубликацияДинамики = ДеньНедели(ТекущаяДатаСеанса()) = 3;
    ПубликацияДинамики = Ложь;
    Выгружено = Ложь;
    
    Для Н = 1 По 2 Цикл
        
        Попытка
            
            //@skip-check query-in-loop
            ВыгрузитьТаблицу(1);            
            //@skip-check query-in-loop
            ВыгрузитьТаблицу(2);
            //@skip-check query-in-loop
            ВыгрузитьТаблицу(3);
            //@skip-check query-in-loop
            ВыгрузитьСчетчики();
            //@skip-check query-in-loop
            ВыгрузитьАвторов();
            //@skip-check query-in-loop
            ВыгрузитьИндексы();
            
            ЛокальныйКаталог = Инструментарий.ПолучитьНастройку("ПапкаДанных");
            УдаленныйКаталог = "/data/";
            Токен            = Инструментарий.ПолучитьНастройку("ТокенNeocities");
			
			СоответствиеФайлов = Новый Соответствие;
    		СоответствиеФайлов.Вставить("data/authors.json" , ЛокальныйКаталог + "authors.json");
			СоответствиеФайлов.Вставить("data/counters.json", ЛокальныйКаталог + "counters.json");
			СоответствиеФайлов.Вставить("data/new.json"     , ЛокальныйКаталог + "new.json");
			СоответствиеФайлов.Вставить("data/top.json"     , ЛокальныйКаталог + "top.json");
			СоответствиеФайлов.Вставить("data/updated.json" , ЛокальныйКаталог + "updated.json");
			
			Выгружено = OPI_Neocities.ЗагрузитьФайлы(Токен, СоответствиеФайлов);
			Выгружено = ВыгрузитьПодкаталог(Токен, ЛокальныйКаталог + "badges", УдаленныйКаталог + "badges");
			Выгружено = ВыгрузитьПодкаталог(Токен, ЛокальныйКаталог + "ypm_index", УдаленныйКаталог + "ypm_index");
            Прервать;
            
        Исключение
            Инструментарий.ЗаписатьИсключение(ОписаниеОшибки());
            Продолжить;
        КонецПопытки;
        
    КонецЦикла;
    
    Если Выгружено Тогда
        
        Если ПубликацияДинамики Тогда
            МетодыТелеграм.ОпубликоватьИзменения(); 
        КонецЕсли;
        
        ПрописатьМеста(ПубликацияДинамики);
		
	Иначе
		
		Инструментарий.ЗаписатьИсключение("Данные сайта не были обновлены!");
        
    КонецЕсли;
        
КонецПроцедуры

Процедура ПрописатьМеста(Знач СбросДинамики = Истина) Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   СтатистикаРепозиториев.Репозиторий КАК Репозиторий,
        |   СтатистикаРепозиториев.Звезды КАК Звезды,
        |   СтатистикаРепозиториев.Подписчики КАК Подписчики,
        |   СтатистикаРепозиториев.Форки КАК Форки,
        |   СтатистикаРепозиториев.ПрошлоеМесто КАК ПрошлоеМесто,
        |   СтатистикаРепозиториев.Репозиторий.Код КАК Код,
        |   СтатистикаРепозиториев.Репозиторий.Группа КАК Группа
        |ИЗ
        |   РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |ГДЕ
        |   НЕ СтатистикаРепозиториев.Репозиторий.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   Звезды УБЫВ,
        |   Форки УБЫВ,
        |   СтатистикаРепозиториев.Репозиторий.ДатаСоздания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НЗ      = РегистрыСведений.СтатистикаРепозиториев.СоздатьНаборЗаписей();	
	Счетчик = 1;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        Если Счетчик <= 500 Тогда
            ЗаписатьДанныеЗначка(Счетчик, ВыборкаДетальныеЗаписи.Код, ВыборкаДетальныеЗаписи.Группа);
        КонецЕсли;
        
        Если СбросДинамики Тогда
    		НоваяЗапись = НЗ.Добавить();
    		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
    		НоваяЗапись.ПрошлоеМесто = Счетчик;
        КонецЕсли;
        		
		Счетчик = Счетчик + 1;
		
    КонецЦикла;
    
    Если СбросДинамики И Не НЗ.Количество() = 0 Тогда
	    НЗ.Записать(Истина);
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьТаблицу(Знач НомерТаблицы)
    
    ДанныеТаблицы = ПолучитьДанныеТаблицы(НомерТаблицы);
    Запрос        = Новый Запрос(ДанныеТаблицы["Запрос"]);
    
    Результат = Запрос.Выполнить().Выгрузить();   
    Данные = Инструментарий.ТаблицаЗначенийВМассив(Результат);
    Счетчик = 1;
    
    Для Каждого Позиция Из Данные Цикл
        
        Изменение = ?(Позиция.prevPlace = 0, Счетчик, Позиция.prevPlace - Счетчик);

        Динамика  = ?(Изменение < 0, "down","up");
        Динамика  = ?(Изменение = 0, "same", Динамика);
                
        Позиция.Вставить("dynamic" , Динамика);
        Позиция.Вставить("сhanging", Изменение);
        Позиция.Вставить("place"   , Счетчик);
        
        Тэги        = Позиция["tags"];
        МассивТэгов = Новый Массив;
        
        Для Каждого Тэг Из Тэги Цикл
            МассивТэгов.Добавить(Тэг.Тэг);
        КонецЦикла;
        
        Позиция.Вставить("tags", МассивТэгов);
        
        Если НомерТаблицы = 1 Тогда
           Значок = ПолучитьРазметкуЗначка(Счетчик, Позиция["code"], Позиция["group"]);
           Позиция.Вставить("badge", Значок);
        КонецЕсли;

        Счетчик = Счетчик + 1;

    КонецЦикла;
    
    СтруктураДанных = Новый Структура;
    СтруктураДанных.Вставить("title"      , ДанныеТаблицы["Заголовок"]);
    СтруктураДанных.Вставить("description", ДанныеТаблицы["Описание"]);
    СтруктураДанных.Вставить("data"       , Данные);
             
    ПотокОтвета = Новый ПотокВПамяти();
        
    ОтветJSON   = Новый ЗаписьJSON;
    ОтветJSON.ОткрытьПоток(ПотокОтвета, "UTF-8");
    
    НастройкиСериализации = Новый НастройкиСериализацииJSON;
    НастройкиСериализации.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.ЛокальнаяДата;
    НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
   
    ЗаписатьJSON(ОтветJSON, СтруктураДанных, НастройкиСериализации);
    
    ОтветJSON.Закрыть();
       
    ДД = ПотокОтвета.ЗакрытьИПолучитьДвоичныеДанные();
    ДД.Записать(Инструментарий.ПолучитьНастройку("ПапкаДанных") + ДанныеТаблицы["ИмяФайла"]);

КонецПроцедуры

Процедура ВыгрузитьСчетчики()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Авторы.Ссылка) КАК Авторы
        |ПОМЕСТИТЬ Авторы
        |ИЗ
        |   Справочник.Авторы КАК Авторы
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Репозитории.Ссылка) КАК Репозитории
        |ПОМЕСТИТЬ Репозитории
        |ИЗ
        |   Справочник.Репозитории КАК Репозитории
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   МАКСИМУМ(СтатистикаРепозиториев.Звезды) КАК Звезды,
        |   СтатистикаРепозиториев.Репозиторий КАК Репозиторий
        |ПОМЕСТИТЬ ЗвездыПредварительно
        |ИЗ
        |   РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |
        |СГРУППИРОВАТЬ ПО
        |   СтатистикаРепозиториев.Репозиторий
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ЕСТЬNULL(ЗвездыПредварительно.Звезды, 0)) КАК Звезды
        |ПОМЕСТИТЬ Звезды
        |ИЗ
        |   ЗвездыПредварительно КАК ЗвездыПредварительно";
    
    РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
    
    Авторы      = РезультатЗапроса[0].Выгрузить()[0]["Авторы"];
    Репозитории = РезультатЗапроса[1].Выгрузить()[0]["Репозитории"];
    Звезды      = РезультатЗапроса[3].Выгрузить()[0]["Звезды"];
    
    СтруктураДанных = Новый Структура("totalcounter,starscounter,authorscounter"
        , Репозитории
        , Звезды
        , Авторы);
    
    ПотокОтвета = Новый ПотокВПамяти();
        
    ОтветJSON   = Новый ЗаписьJSON;
    ОтветJSON.ОткрытьПоток(ПотокОтвета, "UTF-8");
    
    
    ЗаписатьJSON(ОтветJSON, СтруктураДанных);
    
    ОтветJSON.Закрыть();
    ДД = ПотокОтвета.ЗакрытьИПолучитьДвоичныеДанные();
    ДД.Записать(Инструментарий.ПолучитьНастройку("ПапкаДанных") + "counters.json");
    
КонецПроцедуры

Процедура ВыгрузитьАвторов()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Репозитории.Автор.Наименование КАК Автор,
        |   Репозитории.Автор.URL КАК URL,
        |   Репозитории.Автор.Аватар КАК Аватар,
        |   ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Репозитории.Ссылка), 0) КАК Репозиториев,
        |   ЕСТЬNULL(СУММА(СтатистикаРепозиториев.Звезды), 0) КАК Звезд
        |ПОМЕСТИТЬ Основной
        |ИЗ
        |   Справочник.Репозитории КАК Репозитории
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |       ПО (СтатистикаРепозиториев.Репозиторий = Репозитории.Ссылка)
        |
        |СГРУППИРОВАТЬ ПО
        |   Репозитории.Автор.Наименование,
        |   Репозитории.Автор.URL,
        |   Репозитории.Автор.Аватар
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Основной.Автор КАК Автор,
        |   Основной.URL КАК URL,
        |   Основной.Аватар КАК Аватар,
        |   Основной.Репозиториев КАК Репозиториев,
        |   Основной.Звезд КАК Звезд
        |ИЗ
        |   Основной КАК Основной
        |
        |УПОРЯДОЧИТЬ ПО
        |   Звезд УБЫВ,
        |   Репозиториев";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    МассивАвторов = Новый Массив;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        СтруктураАвтора = Новый Структура("name,url,pic,repos,stars");
        СтруктураАвтора.Вставить("name" , ВыборкаДетальныеЗаписи.Автор);
        СтруктураАвтора.Вставить("url"  , ВыборкаДетальныеЗаписи.URL);
        СтруктураАвтора.Вставить("pic"  , ВыборкаДетальныеЗаписи.Аватар);
        СтруктураАвтора.Вставить("repos", ВыборкаДетальныеЗаписи.Репозиториев);
        СтруктураАвтора.Вставить("stars", ВыборкаДетальныеЗаписи.Звезд);
        МассивАвторов.Добавить(СтруктураАвтора);
        
    КонецЦикла;
    
    ПотокОтвета = Новый ПотокВПамяти();
        
    ОтветJSON   = Новый ЗаписьJSON;
    ОтветJSON.ОткрытьПоток(ПотокОтвета, "UTF-8");
   
    ЗаписатьJSON(ОтветJSON, МассивАвторов);
    
    ОтветJSON.Закрыть();
    ДД = ПотокОтвета.ЗакрытьИПолучитьДвоичныеДанные();
    
    ДД.Записать(Инструментарий.ПолучитьНастройку("ПапкаДанных") + "authors.json");
    
КонецПроцедуры

Функция ПолучитьДанныеТаблицы(Знач НомерТаблицы)
    
    СтруктураДанных = Новый Структура("Запрос,Заголовок,Описание,ИмяФайла");
    
    Если НомерТаблицы = 1 Тогда
        
        Упорядочивание = "
           | СтатистикаРепозиториевСрезПоследних.Звезды УБЫВ,
           | СтатистикаРепозиториевСрезПоследних.Форки УБЫВ,
           | Репозитории.ДатаСоздания";
        
        СтруктураДанных["Запрос"]    = ПолучитьТекстЗапросаТоп(Упорядочивание);
        СтруктураДанных["Заголовок"] = "Топ-500 репозиториев";
        СтруктураДанных["Описание"]  = "По числу звезд";
        СтруктураДанных["ИмяФайла"]  = "top.json";
        
    ИначеЕсли НомерТаблицы = 2 Тогда 
        
        Упорядочивание = "
           | Репозитории.ДатаСоздания УБЫВ";
        
        СтруктураДанных["Запрос"]    = ПолучитьТекстЗапросаТоп(Упорядочивание);
        СтруктураДанных["Заголовок"] = "Последние созданные репозитории";
        СтруктураДанных["Описание"]  = "Самые новые";
        СтруктураДанных["ИмяФайла"]  = "new.json";
        
    ИначеЕсли НомерТаблицы = 3 Тогда
        
        Упорядочивание = "
            | Репозитории.ПоследнееОбновление УБЫВ";
        
        СтруктураДанных["Заголовок"] = "Последние обновленные репозитории";
        СтруктураДанных["Описание"]  = "Разрабатываются в данный момент";
        СтруктураДанных["ИмяФайла"]  = "updated.json";
        
    КонецЕсли;
    
    СтруктураДанных["Запрос"] = ПолучитьТекстЗапросаТоп(Упорядочивание);
    
    Возврат СтруктураДанных;
        
КонецФункции

Функция ПолучитьТекстЗапросаТоп(Знач Упорядочивание)
    
    Возврат "ВЫБРАТЬ ПЕРВЫЕ 500
    |   Репозитории.Наименование КАК name,
    |   Репозитории.URL КАК url,
    |   Репозитории.Автор.URL КАК authorUrl,
    |   Репозитории.Автор.Наименование КАК author,
    |   Репозитории.Описание КАК description,
    |   Репозитории.ДатаСоздания КАК createddate,
    |   Репозитории.Лицензия КАК license,
    |   СтатистикаРепозиториевСрезПоследних.Звезды КАК stars,
    |   СтатистикаРепозиториевСрезПоследних.Форки КАК forks,
    |   Репозитории.Автор.Аватар КАК pic,
    |   Репозитории.Язык КАК lang,
    |   Репозитории.Размер КАК size,
    |   Репозитории.ПоследнееОбновление КАК updateddate,
    |   СтатистикаРепозиториевСрезПоследних.ПрошлоеМесто КАК prevPlace,
    |   Репозитории.Код КАК code,
    |   Репозитории.Группа КАК group,
    |   Репозитории.Тэги.(
    |       Тэг КАК Тэг
    |   ) КАК tags,
    |   Репозитории.Код КАК id
    |ИЗ
    |   Справочник.Репозитории КАК Репозитории
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториевСрезПоследних
    |       ПО (СтатистикаРепозиториевСрезПоследних.Репозиторий = Репозитории.Ссылка)
    |ГДЕ
    |   НЕ Репозитории.ПометкаУдаления И Не СтатистикаРепозиториевСрезПоследних.Звезды ЕСТЬ NULL" + "
    |УПОРЯДОЧИТЬ ПО
    |" + Упорядочивание;
    
КонецФункции

Функция ПолучитьИндексМенеджера(Знач НомерГруппы)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   Репозитории.Наименование КАК Наименование,
        |   Репозитории.Автор.Наименование КАК Автор,
        |   Репозитории.Автор.URL КАК URLАвтора,
        |   ВЫРАЗИТЬ(Репозитории.Описание КАК СТРОКА(500)) КАК Описание,
        |   Репозитории.URL КАК URL,
        |   Репозитории.Лицензия КАК Лицензия,
        |   ЕСТЬNULL(СтатистикаРепозиториев.Звезды, 0) КАК Звезды,
        |   Репозитории.Ссылка КАК Ссылка,
        |   Репозитории.Код КАК Код
        |ПОМЕСТИТЬ ДанныеРепозиториев
        |ИЗ
        |   РегистрСведений.Пакеты КАК Пакеты
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Репозитории КАК Репозитории
        |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |           ПО (СтатистикаРепозиториев.Репозиторий = Репозитории.Ссылка)
        |       ПО Пакеты.Репозиторий = Репозитории.Ссылка
        |ГДЕ
        |   Репозитории.Группа = &Группа
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДанныеРепозиториев.Наименование КАК name,
        |   ДанныеРепозиториев.Описание КАК description,
        |   ДанныеРепозиториев.Автор КАК authorName,
        |   ДанныеРепозиториев.URLАвтора КАК authorURL,
        |   ДанныеРепозиториев.URL КАК URL,
        |   ДанныеРепозиториев.Лицензия КАК license,
        |   ДанныеРепозиториев.Звезды КАК stars,
        |   Пакеты.Версия КАК version,
        |   Пакеты.Файл КАК file,
        |   Пакеты.URL КАК fileURL,
        |   Пакеты.Размер КАК size,
        |   Пакеты.Скачиваний КАК downloads,
        |   Пакеты.Вид КАК type,
        |   ДанныеРепозиториев.Ссылка КАК object,
        |   ДанныеРепозиториев.Код КАК id,
        |   Релизы.ДатаРелиза КАК date
        |ПОМЕСТИТЬ Финал
        |ИЗ
        |   ДанныеРепозиториев КАК ДанныеРепозиториев
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Пакеты КАК Пакеты
        |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Релизы КАК Релизы
        |           ПО Пакеты.Репозиторий = Релизы.Репозиторий
        |               И Пакеты.Версия = Релизы.Версия
        |       ПО ДанныеРепозиториев.Ссылка = Пакеты.Репозиторий
        |
        |СГРУППИРОВАТЬ ПО
        |   Пакеты.Файл,
        |   Пакеты.URL,
        |   ДанныеРепозиториев.URLАвтора,
        |   ДанныеРепозиториев.Автор,
        |   ДанныеРепозиториев.URL,
        |   Пакеты.Версия,
        |   ДанныеРепозиториев.Описание,
        |   ДанныеРепозиториев.Лицензия,
        |   ДанныеРепозиториев.Наименование,
        |   ДанныеРепозиториев.Звезды,
        |   Пакеты.Размер,
        |   Пакеты.Скачиваний,
        |   Пакеты.Вид,
        |   ДанныеРепозиториев.Ссылка,
        |   ДанныеРепозиториев.Код,
        |   Релизы.ДатаРелиза
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Финал.name КАК name,
        |   Финал.description КАК description,
        |   Финал.authorName КАК authorName,
        |   Финал.authorURL КАК authorURL,
        |   Финал.URL КАК URL,
        |   Финал.license КАК license,
        |   Финал.stars КАК stars,
        |   Финал.version КАК version,
        |   Финал.file КАК file,
        |   Финал.fileURL КАК fileURL,
        |   Финал.size КАК size,
        |   Финал.downloads КАК downloads,
        |   Финал.type КАК type,
        |   Финал.object КАК object,
        |   Финал.id КАК id,
        |   МАКСИМУМ(ЕСТЬNULL(Финал.date, ДАТАВРЕМЯ(1, 1, 1))) КАК date
        |ИЗ
        |   Финал КАК Финал
        |
        |СГРУППИРОВАТЬ ПО
        |   Финал.authorURL,
        |   Финал.description,
        |   Финал.name,
        |   Финал.authorName,
        |   Финал.URL,
        |   Финал.license,
        |   Финал.version,
        |   Финал.file,
        |   Финал.fileURL,
        |   Финал.stars,
        |   Финал.size,
        |   Финал.downloads,
        |   Финал.type,
        |   Финал.object,
        |   Финал.id
        |ИТОГИ
        |   МАКСИМУМ(name),
        |   МАКСИМУМ(description),
        |   МАКСИМУМ(authorName),
        |   МАКСИМУМ(authorURL),
        |   МАКСИМУМ(URL),
        |   МАКСИМУМ(license),
        |   МАКСИМУМ(stars),
        |   МАКСИМУМ(file),
        |   МАКСИМУМ(size),
        |   МАКСИМУМ(downloads),
        |   МАКСИМУМ(type),
        |   МАКСИМУМ(id)
        |ПО
        |   object,
        |   version";
    
    Запрос.УстановитьПараметр("Группа", НомерГруппы);
    РезультатЗапроса = Запрос.Выполнить();
    МассивИндекса    = Новый Массив;
    ПоляРепозитория  = "id,name,description,authorName,authorURL,URL,license,stars";
    ПоляФайла        = "file,fileURL,size,downloads,type,date";
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

        СтруктураТекущего = Новый Структура(ПоляРепозитория);
        ЗаполнитьЗначенияСвойств(СтруктураТекущего, ВыборкаДетальныеЗаписи);
        
        МассивВерсий  = Новый Массив;       
        ВыборкаВерсий = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        
        Пока ВыборкаВерсий.Следующий() Цикл
            
            МассивФайлов    = Новый Массив;
            СтруктураВерсии = Новый Структура;
            СтруктураВерсии.Вставить("version", ВыборкаВерсий.version);
            
            ВыборкаФайлов = ВыборкаВерсий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            Пока ВыборкаФайлов.Следующий() Цикл
                
                СтруктураФайла = Новый Структура(ПоляФайла);
                ЗаполнитьЗначенияСвойств(СтруктураФайла, ВыборкаФайлов);
                МассивФайлов.Добавить(СтруктураФайла);
                
            КонецЦикла;
            
            СтруктураВерсии.Вставить("files", МассивФайлов);
            
            МассивВерсий.Добавить(СтруктураВерсии);
            
        КонецЦикла;
        
        СтруктураТекущего.Вставить("versions", МассивВерсий);
        
        МассивИндекса.Добавить(СтруктураТекущего);
        
    КонецЦикла;  
    
    Возврат МассивИндекса;
    
КонецФункции

Функция ПолучитьРазметкуЗначка(Знач Место, Знач Код, Знач Группа)
    
    Код     	= OPI_Инструменты.ЧислоВСтроку(Код);
	Место    	= OPI_Инструменты.ЧислоВСтроку(Место);
	Группа      = OPI_Инструменты.ЧислоВСтроку(Группа);
    
    URL = "https://openyellow.org/grid?data=top&repo=" + Код;
    
	Значек    = "https://img.shields.io/endpoint?url=https://openyellow.org/data/badges/"
	+ OPI_Инструменты.ЧислоВСтроку(Группа)
	+ "/"
	+ OPI_Инструменты.ЧислоВСтроку(Код)
	+ ".json";
	
	Разметка = "![OpenYellow]("	+ Значек + ")";
	Разметка = "[" + Разметка + "]" + "(" + URL	+ ")";
    
    Возврат Разметка;

КонецФункции

Функция ЗаписатьДанныеЗначка(Знач Место, Знач Код, Знач Группа)
    
    Код     	= OPI_Инструменты.ЧислоВСтроку(Код);
	Место    	= OPI_Инструменты.ЧислоВСтроку(Место);
	Группа      = OPI_Инструменты.ЧислоВСтроку(Группа);
    ПапкаДанных	= Инструментарий.ПолучитьНастройку("ПапкаДанных");
    
    МассивПутей = Новый Массив;
    МассивПутей.Добавить(ПапкаДанных);
		
	Лого = Константы.Лого.Получить();

	СтруктураJSON = Новый Структура;
	СтруктураJSON.Вставить("schemaVersion", 1);
	СтруктураJSON.Вставить("label"        , "OpenYellow");
	СтруктураJSON.Вставить("message"      , "#" + Место);
	СтруктураJSON.Вставить("color"        , "yellow");
	СтруктураJSON.Вставить("logoSvg"      , Лого);
    
    Поток = Новый ПотокВПамяти();
      
    JSON = Новый ЗаписьJSON;
    JSON.ОткрытьПоток(Поток, "UTF-8", Ложь);
    ЗаписатьJSON(JSON, СтруктураJSON);
    JSON.Закрыть();
    
    ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
    
    Для Каждого Папка Из МассивПутей Цикл
        
        ПутьГруппы		= Папка + "badges\" + Группа;
        КаталогГруппы 	= Новый Файл(ПутьГруппы);
        
        Если Не КаталогГруппы.Существует() Тогда
            СоздатьКаталог(ПутьГруппы);
        КонецЕсли;
        
        Путь  = ПутьГруппы + "\" + Код + ".json";       
        ДД.Записать(Путь); 
        
    КонецЦикла;

КонецФункции

Функция ВыгрузитьПодкаталог(Знач Токен, Знач ЛокальныйКаталог, Знач УдаленныйКаталог)
	
	Выгружено = Ложь;
	
	Выгрузка  = OPI_Neocities.СинхронизироватьКаталоги(Токен, ЛокальныйКаталог, УдаленныйКаталог);
	Ошибки    = Выгрузка["errors"];
	
	Если Ошибки > 0 Тогда
		Инструментарий.ЗаписатьИсключение(OPI_Инструменты.JSONСтрокой(Выгрузка));
	Иначе
		Выгружено = Истина;
	КонецЕсли;
	
	Возврат Выгружено;

КонецФункции

#КонецОбласти
