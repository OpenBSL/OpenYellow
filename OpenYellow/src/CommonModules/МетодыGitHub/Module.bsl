#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьДанныеОРепозиториях(Знач Страница = 1, Знач Запрос = "") Экспорт
		
    ОпределитьЗапросГитхаб(Запрос);	
    
	Данные = Инструментарий.ПолучитьСписокРепозиториев(Страница, Запрос);
	
	Если Данные.Получить("items") <> Неопределено Тогда
		
		ВсегоРепозиториев 	= Данные["total_count"];
		
		Если Страница = 1 Тогда
			ОбъектЗапрос = Запрос.ПолучитьОбъект();
			ОбъектЗапрос.Количество = ВсегоРепозиториев;
			ОбъектЗапрос.Записать();
		КонецЕсли;
		
		Для Каждого Репозиторий Из Данные["items"] Цикл		
            //@skip-check query-in-loop
            ОбработатьЗаписьДанныхРепозитория(Репозиторий);			
		КонецЦикла;
				
		Если 30 * Страница < ВсегоРепозиториев Тогда
			ОбновитьДанныеОРепозиториях(Страница + 1, Запрос);
		Иначе	
			ОбъектЗапрос = Запрос.ПолучитьОбъект();
			ОбъектЗапрос.Использован = Истина;
			ОбъектЗапрос.Записать();
            //ОбновитьДанныеРелизов();
			Возврат;    
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеРелизов() Экспорт
    
    ТДС = ТекущаяДатаСеанса();
    
    ПолучитьДанныеПоРелизу(ТДС - (60 * 60 * 24 * 10000));
    ПолучитьДанныеПоРелизу(ТДС - (60 * 60 * 24 * 10));
    
КонецПроцедуры

Функция ПолучитьНомерГруппы() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Репозитории.Ссылка) КАК Количество
    |ИЗ
    |	Справочник.Репозитории КАК Репозитории";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат Цел(ВыборкаДетальныеЗаписи.Количество / 500) + 1;
    Иначе
        Возврат 1;
    КонецЕсли;

КонецФункции
    
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЗаписьДанныхРепозитория(Знач Репозиторий)
    
    ТекущийРепозиторий = ВернутьРепозиторий(Репозиторий["id"]);
    ЭтоНовый           = Не ЗначениеЗаполнено(ТекущийРепозиторий.Ссылка);
    
    Если Не ЭтоНовый Тогда
        Если ТекущийРепозиторий.ПометкаУдаления Тогда
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    ТекущийРепозиторий.ДатаСоздания = Инструментарий.ФорматДата(Репозиторий["created_at"]);
    
    Попытка
        ТекущийРепозиторий.ПоследнееОбновление = Инструментарий.ФорматДата(Репозиторий["pushed_at"]);
    Исключение
        ТекущийРепозиторий.ПоследнееОбновление = Инструментарий.ФорматДата(Репозиторий["updated_at"]);
    КонецПопытки;
        
    ТекущийРепозиторий.Наименование = Репозиторий["name"];
    ТекущийРепозиторий.URL          = Репозиторий["html_url"];
    ТекущийРепозиторий.Описание     = Репозиторий["description"];
			
    ТекущийРепозиторий.Язык			= Репозиторий["language"];
    ТекущийРепозиторий.Размер		= Репозиторий["size"];
    ТекущийРепозиторий.ЭтоФорк      = Репозиторий["fork"];
    ТекущийРепозиторий.Лицензия     = ?(Репозиторий["license"] = Неопределено
    , "Нет"
    , Репозиторий["license"]["name"]);
    
    Если ТипЗнч(Репозиторий["topics"]) = Тип("Массив") Тогда
        
        ТекущийРепозиторий.Тэги.Очистить();
        
        Для Каждого Топик Из Репозиторий["topics"] Цикл
            НовыйТэг = ТекущийРепозиторий.Тэги.Добавить();
            НовыйТэг.Тэг = Топик;
        КонецЦикла;
        
    КонецЕсли;		
    
    //Автор
    
    ДанныеАвтора              = Репозиторий["owner"];
    ТекущийАвтор              = ВернутьАвтора(ДанныеАвтора["id"]);
    ТекущийАвтор.Наименование = ДанныеАвтора["login"];
    ТекущийАвтор.URL          = ДанныеАвтора["html_url"];
    ТекущийАвтор.Аватар       = ДанныеАвтора["avatar_url"];
    
    ТекущийАвтор.Записать();
    
    ТекущийРепозиторий.Автор = ТекущийАвтор.Ссылка;
	
    Если ЭтоНовый Тогда
        
        Если Не ТекущийРепозиторий.ЭтоФорк Тогда
            МетодыТелеграм.СоздатьПостНовогоРепозитория(ТекущийРепозиторий);	
        КонецЕсли;
        
        ТекущийРепозиторий.ДатаДобавления = ТекущаяДатаСеанса();
        
	КонецЕсли;

    ТекущийРепозиторий.Записать();
    
    //Статистика
    
    МЗ = РегистрыСведений.СтатистикаРепозиториев.СоздатьМенеджерЗаписи();
    МЗ.Репозиторий  = ТекущийРепозиторий.Ссылка;
    МЗ.Прочитать();
    
    Если Не ЭтоНовый Тогда
        ЗаписатьТренды(МЗ.Звезды, Репозиторий["stargazers_count"], ТекущийРепозиторий.Ссылка);
    КонецЕсли;
    
    МЗ.Репозиторий  = ТекущийРепозиторий.Ссылка;
    МЗ.Период       = ТекущаяДатаСеанса();
    МЗ.Звезды       = Репозиторий["stargazers_count"];
    МЗ.Подписчики   = Репозиторий["watchers_count"];
    МЗ.Форки        = Репозиторий["forks"];
    
    МЗ.Записать(Истина);

КонецПроцедуры

Процедура ОпределитьЗапросГитхаб(Запрос)
    
    Если Не ЗначениеЗаполнено(Запрос) Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	Запросы.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.Запросы КАК Запросы
        |ГДЕ
        |	НЕ Запросы.Использован
        |	И НЕ Запросы.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |	Запросы.Код";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Если ВыборкаДетальныеЗаписи.Следующий() Тогда
            Запрос = ВыборкаДетальныеЗаписи.Ссылка;
        Иначе
            
            ВсеЗапросы = Справочники.Запросы.Выбрать();
            
            Пока ВсеЗапросы.Следующий() Цикл
                
                ОбъектЗапрос = ВсеЗапросы.Ссылка.ПолучитьОбъект();
                ОбъектЗапрос.Использован = Ложь;
                ОбъектЗапрос.Записать();
                
            КонецЦикла;
            
            ОпределитьЗапросГитхаб(Запрос);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьТренды(Знач ПрошлоеЗначение, Знач НовоеЗначение, Знач Репозиторий)
    
    Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
        Возврат;
    КонецЕсли;
    
    Если ПрошлоеЗначение < НовоеЗначение Тогда
        МЗ = РегистрыСведений.Тренды.СоздатьМенеджерЗаписи();
        МЗ.Репозиторий = Репозиторий;
        МЗ.Изменение   = НовоеЗначение - ПрошлоеЗначение;
        МЗ.Период      = ТекущаяДатаСеанса();
        МЗ.Записать(Истина);
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбновитьДанныеПакетов(Знач Репозиторий, Знач Ассеты, Знач Версия) 
    
    НЗ = РегистрыСведений.Пакеты.СоздатьНаборЗаписей(); 
    НЗ.Отбор.Репозиторий.Установить(Репозиторий);
    НЗ.Отбор.Версия.Установить(Версия);
    НЗ.Прочитать();
    НЗ.Очистить();
    
    Для Каждого Ассет Из Ассеты Цикл
        
        Если Ассет["state"] = "uploaded" Тогда
            
            ИмяФайла = Ассет["name"];
            
            Если СтрЗаканчиваетсяНа(ИмяФайла, ".epf") Тогда
                Вид = 1;
            ИначеЕсли СтрЗаканчиваетсяНа(ИмяФайла, ".erf") Тогда
                Вид = 2;
            ИначеЕсли СтрЗаканчиваетсяНа(ИмяФайла, ".cfe") Тогда
                Вид = 3;
            Иначе
                Продолжить;
            КонецЕсли;
            
            НовыйФайл = НЗ.Добавить();
            НовыйФайл.URL         = Ассет["browser_download_url"];
            НовыйФайл.Размер      = Ассет["size"];
            НовыйФайл.Скачиваний  = Ассет["download_count"];
            НовыйФайл.Файл        = ИмяФайла;
            НовыйФайл.Вид         = Вид;
            НовыйФайл.Репозиторий = Репозиторий;
            НовыйФайл.Версия      = Версия;
            
        КонецЕсли;
        
    КонецЦикла;
    
    НЗ.Записать(Истина);
        
КонецПроцедуры

Процедура ПолучитьДанныеПоРелизу(Знач РубежОбновления)
    
    Попытка
        
    ТДС    = ТекущаяДатаСеанса();
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	Репозитории.Ссылка КАК Репозиторий,
        |	ЕСТЬNULL(РелизыСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
        |	ЕСТЬNULL(РелизыСрезПоследних.Версия, """") КАК Версия,
        |	ЕСТЬNULL(РелизыСрезПоследних.ДатаРелиза, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРелиза
        |ИЗ
        |	Справочник.Репозитории КАК Репозитории
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Релизы.СрезПоследних КАК РелизыСрезПоследних
        |		ПО (РелизыСрезПоследних.Репозиторий = Репозитории.Ссылка)
        |ГДЕ
        |	Репозитории.ПоследнееОбновление > &ПрошлаяНеделя
        |	И НЕ Репозитории.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |	Период";
    
    Запрос.УстановитьПараметр("ПрошлаяНеделя", РубежОбновления);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        
        Репозиторий    = ВыборкаДетальныеЗаписи.Репозиторий;
        ПоследнийРелиз = Инструментарий.ПолучитьПоследнийРелиз(Репозиторий);
        ДатаПубликации = ПоследнийРелиз["published_at"];
        Версия         = Строка(ПоследнийРелиз["tag_name"]);
        НоваяВерсия    = Версия <> ВыборкаДетальныеЗаписи.Версия;
        
        МЗ = РегистрыСведений.Релизы.СоздатьМенеджерЗаписи();
        МЗ.Репозиторий = Репозиторий;
        
        Если НоваяВерсия Тогда
            
            Если ЗначениеЗаполнено(ДатаПубликации)  Тогда
                
                OPI_ПреобразованиеТипов.ПолучитьДату(ДатаПубликации); 
                
                МЗ.Версия      = Версия;
                МЗ.ДатаРелиза  = ДатаПубликации;
                
                Если ДатаПубликации > ТекущаяДатаСеанса() - (60 * 60 * 24 * 7)  Тогда 
                    МетодыТелеграм.СоздатьПостНовогоРелиза(Репозиторий, Версия, ДатаПубликации);
                КонецЕсли;         
                
            КонецЕсли; 
            
            
        Иначе
            
            Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Период) Тогда
                МЗ.Период = ВыборкаДетальныеЗаписи.Период;
                МЗ.Прочитать();
            КонецЕсли;
            
        КонецЕсли;
        
        МЗ.Период = ТДС;
        МЗ.Записать(Истина);
        
        Ассеты = ПоследнийРелиз["assets"];
        Если ЗначениеЗаполнено(Ассеты) Тогда
            ОбновитьДанныеПакетов(Репозиторий, Ассеты, Версия);    
        КонецЕсли;
        
    КонецЕсли;   
    
    Исключение
        Инструментарий.ЗаписатьИсключение(ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

Функция ВернутьРепозиторий(Знач Код)
	
	ТекущийРепозиторий = Справочники.Репозитории.НайтиПоКоду(Код);
	
	Если Не ЗначениеЗаполнено(ТекущийРепозиторий) Тогда
		
		ВозвращаемыйРепозиторий = Справочники.Репозитории.СоздатьЭлемент();
		ВозвращаемыйРепозиторий.Код = Код;
		ВозвращаемыйРепозиторий.Группа = ПолучитьНомерГруппы();
        
	Иначе		
		ВозвращаемыйРепозиторий = ТекущийРепозиторий.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ВозвращаемыйРепозиторий;
	
КонецФункции

Функция ВернутьАвтора(Знач Код)
	
	ТекущийАвтор = Справочники.Авторы.НайтиПоКоду(Код);
	
	Если Не ЗначениеЗаполнено(ТекущийАвтор) Тогда
		
		ВозвращаемыйАвтор = Справочники.Авторы.СоздатьЭлемент();
		ВозвращаемыйАвтор.Код = Код;
		
	Иначе
		
		ВозвращаемыйАвтор = ТекущийАвтор.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ВозвращаемыйАвтор;
	
КонецФункции

#КонецОбласти