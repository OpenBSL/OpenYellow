#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьДанныеОРепозиториях(Знач Страница = 1, Знач Запрос = "") Экспорт
		
    ОпределитьЗапросГитхаб(Запрос);	
    
	Данные = Инструментарий.ПолучитьСписокРепозиториев(Страница, Запрос);
	
	Если Данные.Получить("items") <> Неопределено Тогда
		
		ВсегоРепозиториев 	= Данные["total_count"];
		
		Если Страница = 1 Тогда
			ОбъектЗапрос = Запрос.ПолучитьОбъект();
			ОбъектЗапрос.Количество = ВсегоРепозиториев;
			ОбъектЗапрос.Записать();
		КонецЕсли;
		
		Для Каждого Репозиторий Из Данные["items"] Цикл		
            //@skip-check query-in-loop
            ОбработатьЗаписьДанныхРепозитория(Репозиторий);			
		КонецЦикла;
				
		Если 30 * Страница < ВсегоРепозиториев Тогда
			ОбновитьДанныеОРепозиториях(Страница + 1, Запрос);
		Иначе	
			ОбъектЗапрос = Запрос.ПолучитьОбъект();
			ОбъектЗапрос.Использован = Истина;
			ОбъектЗапрос.Записать();
            //ОбновитьДанныеРелизов();
			Возврат;    
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеРелизов() Экспорт
    
    Попытка
        
    ТДС    = ТекущаяДатаСеанса();
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   Репозитории.Ссылка КАК Репозиторий,
        |   ЕСТЬNULL(РелизыСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
        |   ЕСТЬNULL(РелизыСрезПоследних.Версия, """") КАК Версия,
        |   ЕСТЬNULL(РелизыСрезПоследних.ДатаРелиза, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРелиза
        |ИЗ
        |   Справочник.Репозитории КАК Репозитории
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Релизы.СрезПоследних КАК РелизыСрезПоследних
        |       ПО (РелизыСрезПоследних.Репозиторий = Репозитории.Ссылка)
        |ГДЕ
        |   Репозитории.ПоследнееОбновление > &ПрошлаяНеделя
        |
        |УПОРЯДОЧИТЬ ПО
        |   Период";
    
    Запрос.УстановитьПараметр("ПрошлаяНеделя", ТДС - (60 * 60 * 24 * 7));
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        
        Репозиторий    = ВыборкаДетальныеЗаписи.Репозиторий;
        ПоследнийРелиз = Инструментарий.ПолучитьПоследнийРелиз(Репозиторий);
        
        Если Не ЗначениеЗаполнено(ПоследнийРелиз["published_at"])  Тогда
            МЗ = РегистрыСведений.Релизы.СоздатьМенеджерЗаписи();
            МЗ.Период = ТДС;
            МЗ.Репозиторий = Репозиторий;
            МЗ.Записать(Истина);
            Возврат;
        КонецЕсли;
        
        ДатаПубликации = ПоследнийРелиз["published_at"];
        Версия         = ПоследнийРелиз["tag_name"];
                        
        OPI_ПреобразованиеТипов.ПолучитьДату(ДатаПубликации); 
		
		Набор = РегистрыСведений.Релизы.СоздатьНаборЗаписей();
		Набор.Отбор.Репозиторий.Установить(Репозиторий);
		Набор.Отбор.Версия.Уставновить(Версия);
		Набор.Отбор.ДатаРелиза.Установить(ДатаПубликации);
		Набор.Записать();
		
        МЗ             = РегистрыСведений.Релизы.СоздатьМенеджерЗаписи();
        МЗ.Период      = ТДС;
        МЗ.Репозиторий = Репозиторий;
        МЗ.Версия      = Версия;
        МЗ.ДатаРелиза  = ДатаПубликации;
        МЗ.Записать(Истина);
            
        Если ДатаПубликации > ВыборкаДетальныеЗаписи.ДатаРелиза
            И Версия <> ВыборкаДетальныеЗаписи.Версия
            И ДатаПубликации > Дата(2024, 06, 5) Тогда
                       
            МетодыТелеграм.ОпубликоватьРелиз(Репозиторий, Версия, ДатаПубликации);
        КонецЕсли;
               
    КонецЕсли;

    Исключение
        Инструментарий.ЗаписатьИсключение(ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЗаписьДанныхРепозитория(Знач Репозиторий)
    
    ТекущийРепозиторий = ВернутьРепозиторий(Репозиторий["id"]);
    
    ТекущийРепозиторий.ДатаСоздания = Инструментарий.ФорматДата(Репозиторий["created_at"]);
    
    Попытка
        ТекущийРепозиторий.ПоследнееОбновление = Инструментарий.ФорматДата(Репозиторий["pushed_at"]);
    Исключение
        ТекущийРепозиторий.ПоследнееОбновление = Инструментарий.ФорматДата(Репозиторий["updated_at"]);
    КонецПопытки;
        
    ТекущийРепозиторий.Наименование = Репозиторий["name"];
    ТекущийРепозиторий.URL          = Репозиторий["html_url"];
    ТекущийРепозиторий.Описание     = Репозиторий["description"];
    ТекущийРепозиторий.Язык			= Репозиторий["language"];
    ТекущийРепозиторий.Размер		= Репозиторий["size"];
    ТекущийРепозиторий.Лицензия     = ?(Репозиторий["license"] = Неопределено
    , "Нет"
    , Репозиторий["license"]["name"]);
    
    Если ТипЗнч(Репозиторий["topics"]) = Тип("Массив") Тогда
        
        ТекущийРепозиторий.Тэги.Очистить();
        
        Для Каждого Топик Из Репозиторий["topics"] Цикл
            НовыйТэг = ТекущийРепозиторий.Тэги.Добавить();
            НовыйТэг.Тэг = Топик;
        КонецЦикла;
        
    КонецЕсли;		
    
    //Автор
    
    ДанныеАвтора              = Репозиторий["owner"];
    ТекущийАвтор              = ВернутьАвтора(ДанныеАвтора["id"]);
    ТекущийАвтор.Наименование = ДанныеАвтора["login"];
    ТекущийАвтор.URL          = ДанныеАвтора["html_url"];
    ТекущийАвтор.Аватар       = ДанныеАвтора["avatar_url"];
    
    ТекущийАвтор.Записать();
    
    ТекущийРепозиторий.Автор = ТекущийАвтор.Ссылка;
    
    Если Не ЗначениеЗаполнено(ТекущийРепозиторий.Ссылка) Тогда
        МетодыТелеграм.ОпубликоватьНовыйРепозиторий(ТекущийРепозиторий);
    КонецЕсли;

    ТекущийРепозиторий.Записать();
    
    //Статистика
    
    МЗ = РегистрыСведений.СтатистикаРепозиториев.СоздатьМенеджерЗаписи();
    МЗ.Репозиторий  = ТекущийРепозиторий.Ссылка;
    МЗ.Прочитать();
    
    ЗаписатьТренды(МЗ.Звезды, Репозиторий["stargazers_count"], ТекущийРепозиторий.Ссылка);
    
    МЗ.Репозиторий  = ТекущийРепозиторий.Ссылка;
    МЗ.Период       = ТекущаяДатаСеанса();
    МЗ.Звезды       = Репозиторий["stargazers_count"];
    МЗ.Подписчики   = Репозиторий["watchers_count"];
    МЗ.Форки        = Репозиторий["forks"];
    
    МЗ.Записать(Истина);

КонецПроцедуры

Процедура ОпределитьЗапросГитхаб(Запрос)
    
    Если Не ЗначениеЗаполнено(Запрос) Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	Запросы.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.Запросы КАК Запросы
        |ГДЕ
        |	НЕ Запросы.Использован
        |	И НЕ Запросы.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |	Запросы.Код";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Если ВыборкаДетальныеЗаписи.Следующий() Тогда
            Запрос = ВыборкаДетальныеЗаписи.Ссылка;
        Иначе
            
            ВсеЗапросы = Справочники.Запросы.Выбрать();
            
            Пока ВсеЗапросы.Следующий() Цикл
                
                ОбъектЗапрос = ВсеЗапросы.Ссылка.ПолучитьОбъект();
                ОбъектЗапрос.Использован = Ложь;
                ОбъектЗапрос.Записать();
                
            КонецЦикла;
            
            МетодыТелеграм.ОпубликоватьИзменения();
            МетодыNotion.ЗагрузитьНаNotion();
            ОпределитьЗапросГитхаб(Запрос);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьТренды(Знач ПрошлоеЗначение, Знач НовоеЗначение, Знач Репозиторий)
    
    Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
        Возврат;
    КонецЕсли;
    
    Если ПрошлоеЗначение < НовоеЗначение Тогда
        МЗ = РегистрыСведений.Тренды.СоздатьМенеджерЗаписи();
        МЗ.Репозиторий = Репозиторий;
        МЗ.Изменение   = НовоеЗначение - ПрошлоеЗначение;
        МЗ.Период      = ТекущаяДатаСеанса();
        МЗ.Записать(Истина);
    КонецЕсли;
    
КонецПроцедуры

Функция ВернутьРепозиторий(Знач Код)
	
	ТекущийРепозиторий = Справочники.Репозитории.НайтиПоКоду(Код);
	
	Если Не ЗначениеЗаполнено(ТекущийРепозиторий) Тогда
		
		ВозвращаемыйРепозиторий = Справочники.Репозитории.СоздатьЭлемент();
		ВозвращаемыйРепозиторий.Код = Код;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Репозитории.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.Репозитории КАК Репозитории";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВозвращаемыйРепозиторий.Группа = Цел(ВыборкаДетальныеЗаписи.Количество / 500) + 1;
		Иначе
			ВозвращаемыйРепозиторий.Группа = 1;
		КонецЕсли;
        
	Иначе		
		ВозвращаемыйРепозиторий = ТекущийРепозиторий.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ВозвращаемыйРепозиторий;
	
КонецФункции

Функция ВернутьАвтора(Знач Код)
	
	ТекущийАвтор = Справочники.Авторы.НайтиПоКоду(Код);
	
	Если Не ЗначениеЗаполнено(ТекущийАвтор) Тогда
		
		ВозвращаемыйАвтор = Справочники.Авторы.СоздатьЭлемент();
		ВозвращаемыйАвтор.Код = Код;
		
	Иначе
		
		ВозвращаемыйАвтор = ТекущийАвтор.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ВозвращаемыйАвтор;
	
КонецФункции

#КонецОбласти