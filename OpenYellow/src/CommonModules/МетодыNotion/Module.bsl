// @skip-check Undefined variable

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьНаNotion(СчетчикПродолжения = 0) Экспорт
	
    ВыгрузкаТаблицыNotion(1);
    ВыгрузкаТаблицыNotion(2);
    ВыгрузкаТаблицыNotion(3);
	
КонецПроцедуры

Процедура ПрописатьМеста() Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   СтатистикаРепозиториев.Репозиторий КАК Репозиторий,
        |   СтатистикаРепозиториев.Звезды КАК Звезды,
        |   СтатистикаРепозиториев.Подписчики КАК Подписчики,
        |   СтатистикаРепозиториев.Форки КАК Форки,
        |   СтатистикаРепозиториев.ПрошлоеМесто КАК ПрошлоеМесто
        |ИЗ
        |   РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |ГДЕ
        |   НЕ СтатистикаРепозиториев.Репозиторий.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   Звезды УБЫВ,
        |   Форки УБЫВ,
        |   СтатистикаРепозиториев.Репозиторий.ДатаСоздания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НЗ      = РегистрыСведений.СтатистикаРепозиториев.СоздатьНаборЗаписей();	
	Счетчик = 1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		НоваяЗапись.ПрошлоеМесто = Счетчик;
        		
		Счетчик = Счетчик + 1;
		
    КонецЦикла;
	
	НЗ.Записать(Истина);
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузкаТаблицыNotion(НомерТаблицы, СчетчикПродолжения = 0)
    
    Попытка
        
        Токен = Константы.Токен.Получить();
        
        ТекстЗапроса           = ЗапросТаблицы(НомерТаблицы); 
        МассивВыбранных        = Новый Массив;
        Запрос                 = Новый Запрос(ТекстЗапроса);
        ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
        
        НаименованияПолей = ОпределитьРеквизитыТаблицы(НомерТаблицы);
        РеквизитСтраницы  = НаименованияПолей["Страница"];
            
        Счетчик = 1;
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            МассивВыбранных.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
            
            Если СчетчикПродолжения >= Счетчик Тогда
                Продолжить;	
            КонецЕсли;
            
            СоответствиеДанных = СформироватьСоответствиеДанных(ВыборкаДетальныеЗаписи, Счетчик, НомерТаблицы);	
            Изменение          = СоответствиеДанных["Изменение"];
                        
            Репозиторий = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
            
            Если ЗначениеЗаполнено(Репозиторий[РеквизитСтраницы]) Тогда
                ID = ИзменитьСтраницуNotion(Токен, Репозиторий, СоответствиеДанных, НомерТаблицы);			
            Иначе
                ID = СоздатьСтраницуNotion(Токен, Репозиторий, СоответствиеДанных, НомерТаблицы);						
            КонецЕсли;
			
			Если НомерТаблицы = 1 Тогда
				МетодыСайта.ОбновитьЗначок(Счетчик, Репозиторий.Код, ID, Репозиторий.Группа);	
			КонецЕсли;
			
            Счетчик = Счетчик + 1;	
        	    
        КонецЦикла;
                
        Если НомерТаблицы = 1 Тогда
            ПрописатьМеста();    
        КонецЕсли;
        
        АрхивироватьВыбывших(Токен, МассивВыбранных, НомерТаблицы);
        
    Исключение
        
        Ошибка = ОписаниеОшибки();
        Инструментарий.ЗаписатьИсключение(Ошибка);
        ВыгрузкаТаблицыNotion(НомерТаблицы, Счетчик);
        
    КонецПопытки;
    
КонецПроцедуры

Процедура АрхивироватьВыбывших(Знач Токен, Знач МассивВыбранных, Знач Таблица = 1)
    
    НаименованияПолей = ОпределитьРеквизитыТаблицы(Таблица);
    РеквизитСтраницы  = НаименованияПолей["Страница"];
    РеквизитАрхива    = НаименованияПолей["Архив"];
    Количество        = НаименованияПолей["Количество"];

    Если МассивВыбранных.Количество() = Количество Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |	СтатистикаРепозиториев.Репозиторий." + РеквизитСтраницы + " КАК ID,
        |	СтатистикаРепозиториев.Репозиторий.Код КАК Код,
        |	СтатистикаРепозиториев.Репозиторий КАК Репозиторий,
        |	СтатистикаРепозиториев.Репозиторий.Группа КАК Группа
        |ИЗ
        |	РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториев
        |ГДЕ
        |	НЕ СтатистикаРепозиториев.Репозиторий В (&МассивВыбранных)
        |	И НЕ СтатистикаРепозиториев.Репозиторий." + РеквизитАрхива + "
        |	И НЕ СтатистикаРепозиториев.Репозиторий." + РеквизитСтраницы + " = """"";
        
        Запрос.УстановитьПараметр("МассивВыбранных", МассивВыбранных);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            
            Если Таблица = 1 Тогда
                МетодыСайта.ОбновитьЗначок("-"
                , ВыборкаДетальныеЗаписи.Код
                , ВыборкаДетальныеЗаписи.ID
                , ВыборкаДетальныеЗаписи.Группа);
            КонецЕсли;
            
            Ответ 	= OPI_Notion.ИзменитьСвойстваСтраницы(Токен, ВыборкаДетальныеЗаписи.ID,,,,Истина);
            
            ОбъектРепозиторий = ВыборкаДетальныеЗаписи.Репозиторий.ПолучитьОбъект();
            ОбъектРепозиторий[РеквизитАрхива] = Истина;
            ОбъектРепозиторий.Записать();
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

Функция ИзменитьСтраницуNotion(Знач Токен, Знач Репозиторий, Знач СоответствиеДанных, Знач Таблица)
    
    НаименованияПолей = ОпределитьРеквизитыТаблицы(Таблица);
    РеквизитСтраницы  = НаименованияПолей["Страница"];
    РеквизитАрхива    = НаименованияПолей["Архив"];
    
    ID = Репозиторий[РеквизитСтраницы];
    
    Если Репозиторий[РеквизитАрхива] Тогда
        Ответ = OPI_Notion.ИзменитьСвойстваСтраницы(Токен, ID,,,, Ложь);
    КонецЕсли;
    
    Ответ = OPI_Notion.ИзменитьСвойстваСтраницы(Токен
    , ID
    , СоответствиеДанных
    , Репозиторий.Автор.Аватар
    ,
    , Ложь);
    
    Репозиторий[РеквизитАрхива] = Ложь;
    Репозиторий.Записать();
    
    Возврат ID;

КонецФункции

Функция СоздатьСтраницуNotion(Знач Токен, Знач Репозиторий, Знач СоответствиеДанных, Знач Таблица)
    
    НаименованияПолей = ОпределитьРеквизитыТаблицы(Таблица);
    РеквизитСтраницы  = НаименованияПолей["Страница"];
	НотБаза           = ПолучитьБазу(Таблица);
    
    ID = OPI_Notion.СоздатьСтраницуВБазу(Токен, НотБаза, СоответствиеДанных)["id"];
    ПреобразоватьИД(ID);
    
    Ответ = OPI_Notion.ИзменитьСвойстваСтраницы(Токен, ID,, Репозиторий.Автор.Аватар,, Ложь);  
    Репозиторий[РеквизитСтраницы] = ID;
    
    Репозиторий.Записать();
    
    Возврат ID;

КонецФункции

Функция ЗапросТаблицы(Знач Таблица)
    
    ТекстЗапроса = "";
    
    Если Таблица = 1 Тогда
        ТекстЗапроса = ЗапросТаблицыТопа();       
    ИначеЕсли Таблица = 2 Тогда
        ТекстЗапроса = ЗапросТаблицыПоследних();              
    Иначе
        ТекстЗапроса = ЗапросТаблицыОбновленных();   
    КонецЕсли;

    Возврат ТекстЗапроса;
    
КонецФункции

Функция ЗапросТаблицыТопа()
    
    Возврат 
    "ВЫБРАТЬ ПЕРВЫЕ 500
    |	Репозитории.Наименование КАК Наименование,
    |	Репозитории.URL КАК Репозиторий,
    |	Репозитории.Автор.URL КАК АвторURL,
    |	Репозитории.Автор.Наименование КАК АвторНаименование,
    |	Репозитории.Описание КАК Описание,
    |	Репозитории.ДатаСоздания КАК ДатаСоздания,
    |	Репозитории.Лицензия КАК Лицензия,
    |	СтатистикаРепозиториевСрезПоследних.Звезды КАК Звезды,
    |	СтатистикаРепозиториевСрезПоследних.Форки КАК Форки,
    |	Репозитории.Автор.Аватар КАК Аватар,
    |	СтатистикаРепозиториевСрезПоследних.ПрошлоеМесто КАК ПрошлоеМесто,
    |	Репозитории.Язык КАК Язык,
    |	Репозитории.Размер КАК Размер,
    |	Репозитории.Тэги.(
    |		Ссылка КАК Ссылка,
    |		НомерСтроки КАК НомерСтроки,
    |		Тэг КАК Тэг
    |	) КАК Тэги,
    |	Репозитории.ПоследнееОбновление КАК ДатаОбновления,
    |	Репозитории.Ссылка КАК Ссылка,
    |	Репозитории.СтраницаNotion КАК СтраницаNotion,
    |	Репозитории.Код КАК Код,
    |	Репозитории.Группа КАК Группа
    |ИЗ
    |	Справочник.Репозитории КАК Репозитории
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториевСрезПоследних
    |		ПО (СтатистикаРепозиториевСрезПоследних.Репозиторий = Репозитории.Ссылка)
    |ГДЕ
    |	НЕ Репозитории.ПометкаУдаления
    |
    |УПОРЯДОЧИТЬ ПО
    |	Звезды УБЫВ,
    |	Форки УБЫВ,
    |	ДатаСоздания";
    
КонецФункции

Функция ЗапросТаблицыПоследних()
    
    Возврат 
    "ВЫБРАТЬ ПЕРВЫЕ 200
    |	Репозитории.Наименование КАК Наименование,
    |	Репозитории.URL КАК Репозиторий,
    |	Репозитории.Автор.URL КАК АвторURL,
    |	Репозитории.Автор.Наименование КАК АвторНаименование,
    |	Репозитории.Описание КАК Описание,
    |	Репозитории.ДатаСоздания КАК ДатаСоздания,
    |	Репозитории.Лицензия КАК Лицензия,
    |	СтатистикаРепозиториевСрезПоследних.Звезды КАК Звезды,
    |	СтатистикаРепозиториевСрезПоследних.Форки КАК Форки,
    |	Репозитории.Автор.Аватар КАК Аватар,
    |	Репозитории.Язык КАК Язык,
    |	Репозитории.Тэги.(
    |		Ссылка КАК Ссылка,
    |		НомерСтроки КАК НомерСтроки,
    |		Тэг КАК Тэг
    |	) КАК Тэги,
    |	Репозитории.Ссылка КАК Ссылка,
    |	Репозитории.СтраницаNotionПоследние КАК СтраницаNotionПоследние
    |ИЗ
    |	Справочник.Репозитории КАК Репозитории
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториевСрезПоследних
    |		ПО (СтатистикаРепозиториевСрезПоследних.Репозиторий = Репозитории.Ссылка)
    |ГДЕ
    |	НЕ Репозитории.ПометкаУдаления
    |
    |УПОРЯДОЧИТЬ ПО
    |	ДатаСоздания УБЫВ,
    |	Звезды УБЫВ";
    
КонецФункции

Функция ЗапросТаблицыОбновленных()
    
    Возврат
    "ВЫБРАТЬ ПЕРВЫЕ 200
    |	Репозитории.Наименование КАК Наименование,
    |	Репозитории.URL КАК Репозиторий,
    |	Репозитории.Автор.URL КАК АвторURL,
    |	Репозитории.Автор.Наименование КАК АвторНаименование,
    |	Репозитории.Описание КАК Описание,
    |	Репозитории.ПоследнееОбновление КАК ПоследнееОбновление,
    |	Репозитории.Лицензия КАК Лицензия,
    |	СтатистикаРепозиториевСрезПоследних.Звезды КАК Звезды,
    |	СтатистикаРепозиториевСрезПоследних.Форки КАК Форки,
    |	Репозитории.Автор.Аватар КАК Аватар,
    |	Репозитории.Язык КАК Язык,
    |	Репозитории.Тэги.(
    |		Ссылка КАК Ссылка,
    |		НомерСтроки КАК НомерСтроки,
    |		Тэг КАК Тэг
    |	) КАК Тэги,
    |	Репозитории.Ссылка КАК Ссылка,
    |	Репозитории.СтраницаNotionОбновленные КАК СтраницаNotionОбновленные
    |ИЗ
    |	Справочник.Репозитории КАК Репозитории
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаРепозиториев КАК СтатистикаРепозиториевСрезПоследних
    |		ПО (СтатистикаРепозиториевСрезПоследних.Репозиторий = Репозитории.Ссылка)
    |ГДЕ
    |	НЕ Репозитории.ПометкаУдаления
    |	И РАЗНОСТЬДАТ(Репозитории.ДатаСоздания, Репозитории.ПоследнееОбновление, ДЕНЬ) > 30
    |
    |УПОРЯДОЧИТЬ ПО
    |	ПоследнееОбновление УБЫВ,
    |	Звезды УБЫВ";
    
КонецФункции

Функция ОпределитьРеквизитыТаблицы(Таблица)
    
    РеквизитыТаблицы = Новый Соответствие;
    
    Если Таблица = 1 Тогда
        
        РеквизитыТаблицы.Вставить("Страница"   , "СтраницаNotion");
        РеквизитыТаблицы.Вставить("Архив"      , "Архивирован");
        РеквизитыТаблицы.Вставить("Количество" , 500);
        
    ИначеЕсли Таблица = 2 Тогда
        
        РеквизитыТаблицы.Вставить("Страница"   , "СтраницаNotionПоследние");
        РеквизитыТаблицы.Вставить("Архив"      , "АрхивированПоследние");
        РеквизитыТаблицы.Вставить("Количество" , 200);
        РеквизитыТаблицы.Вставить("ДатаБД"     , "ДатаСоздания");
        РеквизитыТаблицы.Вставить("ДатаТаблицы", "Дата создания");
        
    Иначе
        
        РеквизитыТаблицы.Вставить("Страница"  , "СтраницаNotionОбновленные");
        РеквизитыТаблицы.Вставить("Архив"     , "АрхивированОбновленные");
        РеквизитыТаблицы.Вставить("Количество", 200);
        РеквизитыТаблицы.Вставить("ДатаБД"    , "ПоследнееОбновление");
        РеквизитыТаблицы.Вставить("ДатаТаблицы", "Дата обновления");
        
    КонецЕсли;

    Возврат РеквизитыТаблицы;
    
КонецФункции

Функция ПолучитьБазу(Знач Таблица)
    
    Если Таблица = 1 Тогда
        НотБаза = Константы.База.Получить();
    ИначеЕсли Таблица = 2 Тогда 
        НотБаза = Константы.БазаПоследних.Получить(); 
    Иначе
        НотБаза = Константы.БазаОбновленных.Получить();     
    КонецЕсли;
    
    Возврат НотБаза;
    
КонецФункции

Функция СформироватьСоответствиеДанных(Данные, Счетчик, Таблица)
    
    Если Таблица = 1 Тогда
        СоответствиеДанных = СформироватьСоответствиеТопа(Данные, Счетчик);
    Иначе        
        СоответствиеДанных = СформироватьСоответствиеДопТаблиц(Данные, Счетчик, Таблица);
    КонецЕсли;
    
    Возврат СоответствиеДанных;
    
КонецФункции

Функция СформироватьСоответствиеТопа(Данные, Счетчик)
    
    URL       = "https://openyellow.neocities.org/";
    Изменение = ?(Данные.ПрошлоеМесто = 0, Счетчик, Данные.ПрошлоеМесто - Счетчик);
    
    Динамика  = ?(Изменение < 0, URL + "down.png", URL + "up.png");
    Динамика  = ?(Изменение = 0, URL + "same.png", Динамика);
    
    СоответствиеДанных = Новый Соответствие;
    СоответствиеДанных.Вставить("Место"		   		, Счетчик);
    СоответствиеДанных.Вставить("Изменение"			, Изменение);
    СоответствиеДанных.Вставить("Динамика"			, Новый Структура("Arrow", Динамика)); 
    СоответствиеДанных.Вставить("Наименование" 		, Данные.Наименование);
    СоответствиеДанных.Вставить("Репозиторий"  		, Данные.Репозиторий);
    СоответствиеДанных.Вставить("Описание"     		, Данные.Описание);
    СоответствиеДанных.Вставить("Автор"        		, Данные.АвторURL);
    СоответствиеДанных.Вставить("Язык"		   		, ?(ЗначениеЗаполнено(Данные.Язык), Данные.Язык, "Другое"));
    СоответствиеДанных.Вставить("Звезды"       		, Данные.Звезды);
    СоответствиеДанных.Вставить("Форки"        		, Данные.Форки);
    СоответствиеДанных.Вставить("Дата создания"		, Данные.ДатаСоздания);
    СоответствиеДанных.Вставить("Дата обновления"	, Данные.ДатаОбновления);
    СоответствиеДанных.Вставить("Лицензия"     		, Данные.Лицензия);
    
    МассивТэгов  = Новый Массив;
    ВыборкаТэгов = Данные.Тэги.Выбрать();
    
    Пока ВыборкаТэгов.Следующий() Цикл      
        МассивТэгов.Добавить(ВыборкаТэгов.Тэг);      
    КонецЦикла;
    
    СоответствиеДанных.Вставить("Тэги"				, МассивТэгов);

    Возврат СоответствиеДанных;
    
КонецФункции

Функция СформироватьСоответствиеДопТаблиц(Данные, Счетчик, Таблица);
    
    НаименованияПолей = ОпределитьРеквизитыТаблицы(Таблица);
    РеквизитДаты      = НаименованияПолей["ДатаБД"];
    ПолеДаты          = НаименованияПолей["ДатаТаблицы"];

    СоответствиеДанных = Новый Соответствие;
    СоответствиеДанных.Вставить("Наименование" 		, Данные.Наименование);
    СоответствиеДанных.Вставить("Репозиторий"  		, Данные.Репозиторий);
    СоответствиеДанных.Вставить("Описание"     		, Данные.Описание);
    СоответствиеДанных.Вставить("Автор"        		, Данные.АвторURL);
    СоответствиеДанных.Вставить("Язык"		   		, ?(ЗначениеЗаполнено(Данные.Язык), Данные.Язык, "Другое"));
    СоответствиеДанных.Вставить("Звезды"       		, Данные.Звезды);
    СоответствиеДанных.Вставить("Форки"        		, Данные.Форки);
    СоответствиеДанных.Вставить(ПолеДаты	        , Данные[РеквизитДаты]);
    СоответствиеДанных.Вставить("Лицензия"     		, Данные.Лицензия);
    
    МассивТэгов  = Новый Массив;
    ВыборкаТэгов = Данные.Тэги.Выбрать();
    
    СчетчикТэгов = 0;
    Пока ВыборкаТэгов.Следующий() И СчетчикТэгов < 20  Цикл
        
        МассивТэгов.Добавить(ВыборкаТэгов.Тэг);
        СчетчикТэгов = СчетчикТэгов + 1;
        
    КонецЦикла;
    
    СоответствиеДанных.Вставить("Тэги", МассивТэгов);
    
    Возврат СоответствиеДанных;
    
КонецФункции

Процедура ПреобразоватьИД(Идентификатор)
    
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Идентификатор);
    
    Идентификатор = СтрЗаменить(Идентификатор, "-", "");
    
КонецПроцедуры

#КонецОбласти